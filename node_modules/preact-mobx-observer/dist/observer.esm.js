import { Reaction } from 'mobx';

const augment = (object, key, func) => {
    const origMethod = object[key];
    object[key] = function () {
        func.apply(this, arguments);
        if (origMethod) {
            return origMethod.apply(this, arguments);
        }
    };
};
const mobxReaction = Symbol("mobxReaction");
const observer = (comp) => {
    const componentClass = comp;
    augment(componentClass.prototype, "componentWillMount", function () {
        const compName = this.constructor.displayName || this.constructor.name;
        this[mobxReaction] = new Reaction(`${compName}.render()`, () => this.setState({}));
    });
    augment(componentClass.prototype, "componentWillUnmount", function () {
        this[mobxReaction].dispose();
        this[mobxReaction] = null;
    });
    const origRender = componentClass.prototype.render;
    componentClass.prototype.render = function (props, state, context) {
        let renderResult;
        this[mobxReaction].track(() => {
            renderResult = origRender.call(this, props, state, context);
        });
        return renderResult;
    };
};

export { observer };
//# sourceMappingURL=observer.esm.js.map
